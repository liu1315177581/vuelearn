1，	
    路由入口：
	使用 router-link 组件来导航
	通过传入 'to' 属性指定链接
	<router-link> 默认会被渲染成一个 `<a>` 标签

	例子：	
		<router-link to="/foo"></router-link>    来导航
   		也可使用命名路由name：
		<router-link :to={name:"foo",params:{}}></router-link>

    路由出口：
	<router-view></router-view>

2,动态路由：
	new VueRouter({
		routes:[
			{path:'/user/:id',component:user}
		]
	})

3,嵌套路由：
	例子：	
		<div class="user">
      			<h2>User {{ $route.params.id }}</h2>
      			<router-view></router-view>
    		</div>
	
		new VueRouter({
			routes:[
				{
					path:'/use/:id',
					component:user,
					children:[
						{
							path:'',
							component:aa
						},
						{
							path:'ord',
							component:UserOrd
						},
						{
							path:'add',
							component:UserAdd
						}
					]
				}
			]
		})


4,编程式导航

     router.push()
	<router-link :to=""> === router.push(...)

	//字符串
	router.push("home");

	//对象
	router.push({path:'home'})

	//命名的路由
	router.push({name:'user',params:{userId:123}})

	//带查询    /register?plan=private
	router.push({path: 'register', query: { plan: 'private' }})

    router.replace();
	<router-link :to="" replace> === router.replace(...)


    router.go();
	这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。

	// 在浏览器记录中前进一步，等同于 history.forward()
	router.go(1)

	// 后退一步记录，等同于 history.back()
	router.go(-1)

	// 前进 3 步记录
	router.go(3)

	// 如果 history 记录不够用，那就默默地失败呗
	router.go(-100)
	router.go(100)

5，命名路由：
	const router = new VueRouter({
  		routes: [
    		   {
      			path: '/user/:userId',
      			name: 'user',
      			component: User
    		   }
  		]
	})
	<router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>
	===
	router.push({ name: 'user', params: { userId: 123 }})

6，重定向(『重定向』的意思是，当用户访问 /a时，URL 将会被替换成 /b，然后匹配路由为 /b)
	
	const router = new VueRouter({
  		routes: [
    			{ path: '/a', redirect: '/b' }    以name为例：	{path:'/a',redirect:{name:'foo'}}
  		]
	})

    别名(/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。)
	const router = new VueRouter({
  		routes: [
    			{ path: '/a', component: A, alias: '/b' }
  		]
	})
	



