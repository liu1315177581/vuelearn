mvvm
m 	数据
v 	视图层
vm	视图模板

Vue中的内置指令
	v-bind	动态的绑定数据，简写为:			v-on	绑定事件监听器，简写为@  v-on:eventName = "eventHandle事件处理函数"
	v-text	更新数据，会覆盖已有的结构		v-html	可以解析数据中的html结构  <span v-html="html"></span>
	v-show	根据值的真假，切换元素的display属性	v-if	根据值的真假，切换元素会被销毁，重建
	v-else-if 多条件判断，为真则渲染		v-else  条件都不符合渲染
	v-for	基于原数据多次渲染元素或模板块		v-model	在表单控件元素上创建双向数据绑定
	v-pre	跳过元素和子元素的编译过程		v-once	只渲染一次，随后数据更新不重新渲染
	v-cloak	隐藏未编译的Mustache语法，css中设置[v-cloak]{display:none}

自定义指令
	除了vue内置的指令，可以自己设置指令
	
	选项对象的directives属性
		{
			directives:{}
		}
	钩子函数：
		update被绑定元素所在的模板更新时调用
		钩子函数中参数：
			el:指令所绑定的元素，可以用来直接操作DOM
			binding:一个对象
				value：指令的绑定值
	


模板
	html
		文本差值{{}} 可以写一些简单的表达式(三目)
		
	templeta 挂载元素的内容都会被替换
		let str = '<div>nihao</div>'  
		//可以写成<script type="x-template" id="temp"> <div>hello</div> <script>  new Vue({ el:'#demo',data:obj,template:"#temp" }) 

		new Vue({
			el:'#div',
			data:data,
			methods:{
				clickHandle(){
					alert(1)
				}
			},
			template:str
		})

	模板 render 函数
		var vm = new Vue({
			el:'#demo',
			data:obj,
			render(createElement){
				return createElement(
					'ul',
					[
						createElement("li",1),
						createElement('li',2)
					]
				)
			}
		})
		数据对象属性
		class:{}	//绑定class，跟v-bind:class 一样的API
		style:{}	//绑定样式，跟v-bind:style 一样的API
		attrs:{}	//添加行间属性
		domProps:{}	//DOM元素属性
		on:{}		//绑定事件
		
		nativeOn:{}	//监听原生事件
		directives:{}	//自定义指令
		scopedSlots:{}	//slot作用域
		slot:{}		//定义slot名称
		key:'key'	//给元素添加唯一标识
		ref:'ref'	//引用信息


事件修饰符
	事件处理函数只有纯粹的逻辑判断，不处理DOM事件的细节
		例如，阻止冒泡，取消默认行为，判断按键
	修饰符的位置：
		v-on:eventName 修饰符
	修饰符：
		.stop	.prevent   .capture   .self   .once
	按键修饰符：
		.enter	.tab   .delete   .esc
		.space  .up    .down     .left    .right
		.ctrl	.alt   .shift    .meta
		.键值


计算属性：
	模板内的表达式是非常便利的，但是它们实际上只用于简单的运算。在模板中放入太多的逻辑会让模板过重且难以维护。
	
	例子：	
		<div id="example">
			<p>Original message:"{{ message }}"</p>
			<p>Computed reversed message:"{{ reverseMessage }}"</p>
		</div>
		
		var vm = new vue({
			el:"#example",
			data:{
				message:"Hello"
			},
			computed:{
				//声明了一个计算属性reverseMessage
				reversedMassage:function(){
					return this.message.split('').reserve.join('')
				}
			}
		})

计算缓存 vs Methods
	<p>message:"{{ reverseMessage }}"</p>
	
	methods:{
		reverseMessage:function(){
			return thid.message.split('').reverse().join('');
		}
	}

组件
	什么是组件：
		组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 js 特性扩展。
	














